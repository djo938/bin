#!/usr/bin/env bash

if [[ -z "$PYTHON_EXECUTABLE" ]] ; then
    echo "WARNING: no python executable defined"
    PYTHON_EXECUTABLE="python2"
fi
echo "use of '$PYTHON_EXECUTABLE' executable"

source includes/test_function

test_file_total=0
test_file_count=0
test_file_missing=0
test_file_complete=0
test_file_fail=0

# iterate on each file that are not test
for module_path in $(find . -iname '*.py' | sort); do 
    # build module name
    build_module_name $module_path
    module_name=$RESULT

    #does this file need to be tester ?
    skip_file $module_path $module_name
    if [[ $RESULT -eq 1 ]] ; then
        continue
    fi

    # build test file path
    build_test_file_path $1
    test_file_path=$RESULT

    test_file_total=$((test_file_total+1))
    
    # file without test file
    if [[ !( -f $test_file_path ) ]]; then
        test_file_missing=$((test_file_missing+1))
        printf "%-40s %4s %s\n" $module_name "0%" "(no test file)"
        continue
    fi
    test_file_count=$((test_file_count+1))

    pytest_output="$($PYTHON_EXECUTABLE -m pytest --cov=$module_name $test_file_path 2>&1)"

    # error in test
    if grep -q " error in " <<<$pytest_output; then
        test_file_fail=$((test_file_fail+1))
        printf "%-40s %4s %s\n" $module_name "??" "TEST ERROR !!!"
        continue
    fi

    # coverage error 1: module note imported
    err1="Coverage.py warning: Module $module_name was never imported."
    if grep -q "$err1" <<<$pytest_output; then
        printf "%-40s %4s %s\n" $module_name "0%" "(module not imported in test file)"
        continue
    fi

    # coverage error 2: no test in test file
    err2="Coverage.py warning: No data was collected."
    if grep -q "$err2" <<<$pytest_output; then
        printf "%-40s %4s %s\n" $module_name "0%" "(no data collected)"
        continue
    fi

    # failing test
    if grep -q "failed, " <<<$pytest_output; then
        test_file_fail=$((test_file_fail+1))
        printf "%-40s %4s %s\n" $module_name "??" "FAILING TEST !!!"
        continue
    fi

    percentage_output="$(echo $pytest_output | grep -o '[^ ]*%')"
    
    # coverage error 3: no tests ran
    err3="no tests ran in"
    if grep -q "$err3" <<<$pytest_output; then
        printf "%-40s %4s %s\n" $module_name $percentage_output "(no test in test file)"
        continue
    fi
    
    # skip full coverage test
    if [[ $percentage_output = 100% ]]; then
        # printf "%-40s %4s\n" $module_name "100%"
        test_file_complete=$((test_file_complete+1))
        continue
    fi
    printf "%-40s %4s\n" $module_name $percentage_output
done

echo
echo "INFO: test file found: $test_file_count/$test_file_total"
echo "INFO: test file missing: $test_file_missing/$test_file_total"
echo
echo "INFO: test file complete: $test_file_complete/$test_file_count"
echo "INFO: test file failed: $test_file_fail/$test_file_count"
