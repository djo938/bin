#!/usr/bin/env bash

build_module_name () {
    # build prefix
    current_dir="$(pwd)"
    module_prefix=""
    
    # look after setup.py, it is the root of the module path
    while [[ $(pwd) != '/' ]]; do
        if [[ -f setup.py ]]; then
            break
        fi
        
        module_prefix="$(basename $(pwd)).$module_prefix"
        cd ..
    done

    # if the root directory is reached, not a python project
    if [[ $(pwd) = '/' ]]; then
        echo "not in a python project, no setup.py found."
        exit
    fi
    cd $current_dir
    
    # build suffix

    # split path on /
    module_path="$1"
    array=(${module_path//// })

    # build module name
    module_name=""
    last_part=""
    first=1
    for i in "${!array[@]}"; do
        last_part="${array[i]}"
        if [[ "${array[i]}" == "." ]]; then
            continue
        fi
        
        if [[ $first -eq 1 ]] ; then
            module_name="${array[i]}"
            first=0
        else
            module_name="$module_name.${array[i]}"
        fi
    done
    module_name=${module_name%.py}
    RESULT="$module_prefix$module_name"
}

skip_file () {
    module_path=$1
    module_name=$2

    # ignore test files
    if [[ "$module_path" = *_test.py ]] ; then 
        RESULT=1
        return
    fi

    # there is no test for setup
    if [[ $module_name = setup ]]; then
        RESULT=1
        return
    fi

    # there is no test for version
    if [[ $module_name = pyshell.__version__ ]]; then
        RESULT=1
        return
    fi

    # there is no test for main
    if [[ $module_name = pyshell.__main__ ]]; then
        RESULT=1
        return
    fi

    # __init__ special cases
    if [[ $module_name = *__init__ ]]; then
        # skip empty __init__
        if [[ !( -s $module_path ) ]]; then
            echo "WARNING: no licence header in file: $module_path"
            RESULT=1
        return
        fi

        # skip __init__ that only contains the licence
        actualsize=$(wc -c <"$module_path")
        if [[ "$actualsize" = 730 ]]; then
            RESULT=1
        return
        fi
    fi
    RESULT=0
}

build_test_file_path () {
    test_file_path=$(dirname $module_path)
    last_part=${last_part%.py}
    test_file_path="$test_file_path/test/$last_part"
    test_file_path+="_test.py"
    RESULT=$test_file_path
}
