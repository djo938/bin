#!/usr/bin/env bash

source install_function
source utils_function

file_exists "setup.py"
directory_exists "debian"
file_exists "debian/changelog"
directory_exists "dist"

# extract the project_name
project_name=$(python setup.py --name)
project_name=${project_name,,}
project_version=$(python setup.py --version)

# extract and parse the first line in the changelog
changelog_first_line=$(head -n 1 "./debian/changelog")
stop_if_failure "fail to read changelog file"

if [[ -z "$changelog_first_line" ]]; then
    quit "empty changelog first line"
fi

if [[ !( $changelog_first_line =~ ^[a-z]+\ \([0-9]+\.[0-9]+\.[0-9]+-[0-9]+\)(\ [a-z]+)+\;(\ [a-z]+=[a-z]+)*$ ) ]]; then
    quit "invalid changelog first line"
fi

changelog_first_line=($changelog_first_line)
changelog_project_name=${changelog_first_line[0]}
to_parse=${changelog_first_line[1]}
to_parse=${to_parse:1:-1}  # remove the parentheses
IFS=- read changelog_project_version changelog_packaging_version the_rest <<< "$to_parse"
unset IFS

if [[ "$project_name" != "$changelog_project_name" ]]; then
    quit "changelog project name mismatches"
fi

if [[ "$project_version" != "$changelog_project_version" ]]; then
    quit "changelog project version mismatches"
fi

change_filename="${project_name}_${project_version}-${changelog_packaging_version}_source.changes"
pushd dist 1> /dev/null

result=$(ls "$change_filename" 2> /dev/null)
if [[ -z "$result" ]]; then
    if [[ !( -d "sources" ) ]]; then
        quit "no changes file found in dist for the project ${project_name}"
    fi

    pushd sources 1> /dev/null
    result=$(ls "$change_filename" 2> /dev/null)
    
    if [[ -z "$result" ]]; then
        quit "no changes file found in dist/sources for the project ${project_name}"
    fi
fi

grep "Source: ${project_name}" $change_filename 1> /dev/null
stop_if_failure "the project name in the change file mismatches"
grep "Architecture: source" $change_filename 1> /dev/null
stop_if_failure "the change file is not a source build"
grep "Version: ${project_version}-${packaging_version}" $change_filename 1> /dev/null
stop_if_failure "the project version in the change file mismatches"

# check if a not empty argument is provided to the script, must be the ppa name
if [ "$#" -ne 1 ]; then
    quit "no ppa name provide to this script"
fi

if [ -z "$1" ]; then
    quit "the ppa name can not be empty"
fi

install_with_apt "dput"
dput "ppa:$1/$project_name" $change_filename
